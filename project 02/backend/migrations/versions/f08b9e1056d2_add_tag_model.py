"""add Tag model

Revision ID: f08b9e1056d2
Revises: c9b5a3e377c5
Create Date: 2025-08-09 01:09:15.246953

"""

from typing import Sequence, Union
import sqlmodel
from alembic import op
import sqlalchemy as sa

from backend.db.sqlmodel_models import TagName
import uuid

# revision identifiers, used by Alembic.
revision: str = "f08b9e1056d2"
down_revision: Union[str, None] = "c9b5a3e377c5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tag",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "name",
            sa.Enum(
                "EXPRESS",
                "STANDARD",
                "FRAGILE",
                "HEAVY",
                "INTERNATIONAL",
                "DOMESTIC",
                "TEMPERATURE_CONTROLLED",
                "GIFT",
                "RETURN",
                "DOCUMENTS",
                name="tagname",
            ),
            nullable=False,
        ),
        sa.Column("instruction", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "shipment_tag",
        sa.Column("shipment_id", sa.Uuid(), nullable=False),
        sa.Column("tag_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["shipment_id"],
            ["shipment.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["tag.id"],
        ),
        sa.PrimaryKeyConstraint("shipment_id", "tag_id"),
    )

    # ### end Alembic commands ###
    # for every tag name go ahead and insert a row into the 'tag' table using op.execute, each entru should habe a unique instrucation and  UUID as a Id
    insert_stmt = sa.text(
        """
    INSERT INTO tag (id, name, instruction)
    VALUES (:id, CAST(:name AS tagname), :instruction)
    """
    )

    for tag_name in TagName:
        op.execute(
            insert_stmt.bindparams(
                id=uuid.uuid4(),
                name=tag_name.name,
                instruction=f"Handle as {tag_name.value.lower().replace('_', ' ')} shipment",
            )
        )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_table("shipment_tag")
    op.drop_table("tag")
    # ### end Alembic commands ###
    # Insert initial tag data
